// <auto-generated />
using System;
using FoodLoverGuide.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodLoverGuide.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250315202451_AddedSeedDataForFirstRestaurantIntoWTSTable")]
    partial class AddedSeedDataForFirstRestaurantIntoWTSTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FoodLoverGuide.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4d8d411a-a288-4d94-a040-6d98126e7ed2"),
                            CategoryName = "Италианска кухня"
                        },
                        new
                        {
                            Id = new Guid("7c9975a1-fd38-4495-93d2-38ae09c402c5"),
                            CategoryName = "Пицария"
                        },
                        new
                        {
                            Id = new Guid("2f2a0aa4-ef02-4ffa-ad36-f6abcb5cad3e"),
                            CategoryName = "Бързо хранене"
                        },
                        new
                        {
                            Id = new Guid("a3730467-ed8f-47d3-903e-cf6cb8aea583"),
                            CategoryName = "Гръцка кухня"
                        },
                        new
                        {
                            Id = new Guid("0068eb45-f381-4a34-8385-cec0e483df37"),
                            CategoryName = "Българска кухня"
                        },
                        new
                        {
                            Id = new Guid("3ce78111-d73b-431b-a52b-96b226fed723"),
                            CategoryName = "Турска кухня"
                        },
                        new
                        {
                            Id = new Guid("04ae13cb-8755-4f52-a6b0-53a8e05c3200"),
                            CategoryName = "Азиатска кухня"
                        },
                        new
                        {
                            Id = new Guid("e12d1204-3592-4caa-bd6b-3d5e3aca32d6"),
                            CategoryName = "Морска храна"
                        },
                        new
                        {
                            Id = new Guid("1b0f88fb-a91d-446e-8f5e-7a8602d2b901"),
                            CategoryName = "Бистро"
                        });
                });

            modelBuilder.Entity("FoodLoverGuide.Models.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Features");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a43a3f1e-02d6-45a9-86a9-06cd2522a9cc"),
                            Name = "Външен детски кът"
                        },
                        new
                        {
                            Id = new Guid("55b7cb27-7913-474a-bf44-5ddff365f959"),
                            Name = "Градина"
                        },
                        new
                        {
                            Id = new Guid("977f158f-77d1-420a-9fcf-6fa6ea75bb38"),
                            Name = "Място за пушачи"
                        },
                        new
                        {
                            Id = new Guid("5c9469f1-1b5c-4089-91e9-f8241fa4a805"),
                            Name = "Вътрешен детски кът"
                        },
                        new
                        {
                            Id = new Guid("63d4971a-893f-4271-8412-52a924f99905"),
                            Name = "Интерннет"
                        },
                        new
                        {
                            Id = new Guid("9a4bf8ac-700f-4348-a70d-c91b992e48b8"),
                            Name = "Паркинг"
                        },
                        new
                        {
                            Id = new Guid("4555dc2e-7693-4544-92c4-9ab807373a59"),
                            Name = "Достъпност за инвалиди"
                        },
                        new
                        {
                            Id = new Guid("62f341ac-7dd5-4339-88e6-77c26954cb9a"),
                            Name = "Доставка"
                        },
                        new
                        {
                            Id = new Guid("d68c6e75-bf22-4fd2-bf84-dd66a4073057"),
                            Name = "Възможност за плащане с карта"
                        });
                });

            modelBuilder.Entity("FoodLoverGuide.Models.MenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("FoodLoverGuide.Models.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("_Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("FoodLoverGuide.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Adults")
                        .HasColumnType("int");

                    b.Property<int?>("Children")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("FoodLoverGuide.Models.Restaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IndoorCapacity")
                        .HasColumnType("int");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int?>("OutdoorCapacity")
                        .HasColumnType("int");

                    b.Property<double?>("PriceRangeFrom")
                        .HasColumnType("float");

                    b.Property<double?>("PriceRangeTo")
                        .HasColumnType("float");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebSite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e9d28cb7-8e75-4b36-b5f9-63a36b435c8b"),
                            Description = "Трябва да се посети не само Исторически музей Искра, но и Marcon Italian Cuisine. Посетителите посочват, че е добре да отидете тук за италианска храна. Този ресторант е за препоръчване за добре приготвени пици, паста и салати. Както твърдят много рецензенти, лимонадата е наистина страхотна.Уютната атмосфера на Marcon Italian Cuisine дава  възможност на гостите да релаксират след тежък работен ден. Приятният персонал работи усилено, остава позитивен и прави това място страхотно. Обслужването на това място е нещо, което човек може да нарече бързо. Ще харесате справедливи цени.",
                            Email = "marconpizza@gmail.com",
                            Facebook = "Marcon Italian Cuisine",
                            IndoorCapacity = 60,
                            Instagram = "marcon_italian_cuisine",
                            Location = "ул. 'Любен Каравелов' 3, Казанлък",
                            Name = "Marcon Italian Cuisine",
                            OutdoorCapacity = 60,
                            PriceRangeFrom = 18.0,
                            PriceRangeTo = 45.0,
                            Telephone = "0883530101",
                            WebSite = ""
                        },
                        new
                        {
                            Id = new Guid("b7b8ab2e-d671-4829-b35d-9814918f8342"),
                            Description = "Исторически музей Искра може да бъде на вашия маршрут по подразбиране, съветът на клиентите е да посетите този ресторант. Потопете се в прекрасната гръцка и италианска кухня на това място. Заслужава си да посетите Meraki Urban Gastro Lounge за добри бургери, салати капрезе и свинско. Тук можете да поръчате вкусно вино. Уютната атмосфера на това място кара гостите да се чувстват спокойни и да си прекарват приятно. Успехът на това място не би бил възможен без любезния персонал. Доброто обслужване е нещо, което посетителите отбелязват в отзивите си. В този ресторант се очакват адекватни цени.",
                            Email = "",
                            Facebook = "Meraki Urban Gastro Lounge ",
                            IndoorCapacity = 30,
                            Instagram = "meraki_alldayfoodexperience",
                            Location = "ул. 'Чудомир' 6, Казанлък",
                            Name = "Meraki Urban Gastro Lounge",
                            OutdoorCapacity = 30,
                            PriceRangeFrom = 18.0,
                            PriceRangeTo = 45.0,
                            Telephone = "0898909098",
                            WebSite = ""
                        },
                        new
                        {
                            Id = new Guid("8670fecf-265e-4743-be6a-6477389cc15e"),
                            Description = "Гостите казват, че тук харесват италианската и турската кухня. Ресторант Делта осигурява доставка на храна за удобство на своите клиенти. Внимателният персонал работи усилено, остава позитивен и прави това място страхотно. Доброто обслужване показва високо ниво на качество на това място. Според мненията на рецензентите цените са средни. Със сигурност ще оцените спокойната атмосфера",
                            Email = "delta.restaurant.pizza@gmail.com",
                            Facebook = "Ресторант Делта",
                            IndoorCapacity = 100,
                            Instagram = "delta.restaurant.pizza",
                            Location = "ул. 'Бачо Киро' 2, Казанлък",
                            Name = "Ресторант Делта",
                            OutdoorCapacity = 0,
                            PriceRangeFrom = 18.0,
                            PriceRangeTo = 45.0,
                            Telephone = "0888655655",
                            WebSite = ""
                        });
                });

            modelBuilder.Entity("FoodLoverGuide.Models.RestaurantCategories", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId", "RestaurantId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("RestaurantCategories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("4d8d411a-a288-4d94-a040-6d98126e7ed2"),
                            RestaurantId = new Guid("e9d28cb7-8e75-4b36-b5f9-63a36b435c8b")
                        },
                        new
                        {
                            CategoryId = new Guid("4d8d411a-a288-4d94-a040-6d98126e7ed2"),
                            RestaurantId = new Guid("b7b8ab2e-d671-4829-b35d-9814918f8342")
                        },
                        new
                        {
                            CategoryId = new Guid("a3730467-ed8f-47d3-903e-cf6cb8aea583"),
                            RestaurantId = new Guid("b7b8ab2e-d671-4829-b35d-9814918f8342")
                        },
                        new
                        {
                            CategoryId = new Guid("0068eb45-f381-4a34-8385-cec0e483df37"),
                            RestaurantId = new Guid("b7b8ab2e-d671-4829-b35d-9814918f8342")
                        },
                        new
                        {
                            CategoryId = new Guid("3ce78111-d73b-431b-a52b-96b226fed723"),
                            RestaurantId = new Guid("8670fecf-265e-4743-be6a-6477389cc15e")
                        },
                        new
                        {
                            CategoryId = new Guid("0068eb45-f381-4a34-8385-cec0e483df37"),
                            RestaurantId = new Guid("8670fecf-265e-4743-be6a-6477389cc15e")
                        });
                });

            modelBuilder.Entity("FoodLoverGuide.Models.RestaurantFeature", b =>
                {
                    b.Property<Guid>("FeatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FeatureId", "RestaurantId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("RestaurantFeatures");

                    b.HasData(
                        new
                        {
                            FeatureId = new Guid("55b7cb27-7913-474a-bf44-5ddff365f959"),
                            RestaurantId = new Guid("e9d28cb7-8e75-4b36-b5f9-63a36b435c8b")
                        },
                        new
                        {
                            FeatureId = new Guid("977f158f-77d1-420a-9fcf-6fa6ea75bb38"),
                            RestaurantId = new Guid("e9d28cb7-8e75-4b36-b5f9-63a36b435c8b")
                        },
                        new
                        {
                            FeatureId = new Guid("63d4971a-893f-4271-8412-52a924f99905"),
                            RestaurantId = new Guid("e9d28cb7-8e75-4b36-b5f9-63a36b435c8b")
                        },
                        new
                        {
                            FeatureId = new Guid("9a4bf8ac-700f-4348-a70d-c91b992e48b8"),
                            RestaurantId = new Guid("e9d28cb7-8e75-4b36-b5f9-63a36b435c8b")
                        },
                        new
                        {
                            FeatureId = new Guid("4555dc2e-7693-4544-92c4-9ab807373a59"),
                            RestaurantId = new Guid("e9d28cb7-8e75-4b36-b5f9-63a36b435c8b")
                        },
                        new
                        {
                            FeatureId = new Guid("62f341ac-7dd5-4339-88e6-77c26954cb9a"),
                            RestaurantId = new Guid("e9d28cb7-8e75-4b36-b5f9-63a36b435c8b")
                        },
                        new
                        {
                            FeatureId = new Guid("d68c6e75-bf22-4fd2-bf84-dd66a4073057"),
                            RestaurantId = new Guid("e9d28cb7-8e75-4b36-b5f9-63a36b435c8b")
                        },
                        new
                        {
                            FeatureId = new Guid("55b7cb27-7913-474a-bf44-5ddff365f959"),
                            RestaurantId = new Guid("b7b8ab2e-d671-4829-b35d-9814918f8342")
                        },
                        new
                        {
                            FeatureId = new Guid("4555dc2e-7693-4544-92c4-9ab807373a59"),
                            RestaurantId = new Guid("b7b8ab2e-d671-4829-b35d-9814918f8342")
                        },
                        new
                        {
                            FeatureId = new Guid("63d4971a-893f-4271-8412-52a924f99905"),
                            RestaurantId = new Guid("b7b8ab2e-d671-4829-b35d-9814918f8342")
                        },
                        new
                        {
                            FeatureId = new Guid("62f341ac-7dd5-4339-88e6-77c26954cb9a"),
                            RestaurantId = new Guid("b7b8ab2e-d671-4829-b35d-9814918f8342")
                        },
                        new
                        {
                            FeatureId = new Guid("d68c6e75-bf22-4fd2-bf84-dd66a4073057"),
                            RestaurantId = new Guid("b7b8ab2e-d671-4829-b35d-9814918f8342")
                        },
                        new
                        {
                            FeatureId = new Guid("977f158f-77d1-420a-9fcf-6fa6ea75bb38"),
                            RestaurantId = new Guid("8670fecf-265e-4743-be6a-6477389cc15e")
                        },
                        new
                        {
                            FeatureId = new Guid("63d4971a-893f-4271-8412-52a924f99905"),
                            RestaurantId = new Guid("8670fecf-265e-4743-be6a-6477389cc15e")
                        },
                        new
                        {
                            FeatureId = new Guid("9a4bf8ac-700f-4348-a70d-c91b992e48b8"),
                            RestaurantId = new Guid("8670fecf-265e-4743-be6a-6477389cc15e")
                        },
                        new
                        {
                            FeatureId = new Guid("4555dc2e-7693-4544-92c4-9ab807373a59"),
                            RestaurantId = new Guid("8670fecf-265e-4743-be6a-6477389cc15e")
                        },
                        new
                        {
                            FeatureId = new Guid("62f341ac-7dd5-4339-88e6-77c26954cb9a"),
                            RestaurantId = new Guid("8670fecf-265e-4743-be6a-6477389cc15e")
                        },
                        new
                        {
                            FeatureId = new Guid("d68c6e75-bf22-4fd2-bf84-dd66a4073057"),
                            RestaurantId = new Guid("8670fecf-265e-4743-be6a-6477389cc15e")
                        });
                });

            modelBuilder.Entity("FoodLoverGuide.Models.RestaurantPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("RestaurantPhotos");
                });

            modelBuilder.Entity("FoodLoverGuide.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("FoodLoverGuide.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FoodLoverGuide.Models.WorkTimeSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("ClosingTime")
                        .HasColumnType("time");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("OpeningTime")
                        .HasColumnType("time");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("WorkTimeSchedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4e2bbed5-ba4b-44b6-b16a-86de98a63ce0"),
                            ClosingTime = new TimeSpan(0, 23, 30, 0, 0),
                            Day = 1,
                            IsClosed = false,
                            OpeningTime = new TimeSpan(0, 11, 30, 0, 0),
                            RestaurantId = new Guid("e9d28cb7-8e75-4b36-b5f9-63a36b435c8b")
                        },
                        new
                        {
                            Id = new Guid("dfe91a02-404b-4d36-8537-b1b82fe28d43"),
                            ClosingTime = new TimeSpan(0, 23, 30, 0, 0),
                            Day = 2,
                            IsClosed = false,
                            OpeningTime = new TimeSpan(0, 11, 30, 0, 0),
                            RestaurantId = new Guid("e9d28cb7-8e75-4b36-b5f9-63a36b435c8b")
                        },
                        new
                        {
                            Id = new Guid("64bb2a3b-585c-48dd-9e0b-216ce8524a8c"),
                            ClosingTime = new TimeSpan(0, 23, 30, 0, 0),
                            Day = 3,
                            IsClosed = false,
                            OpeningTime = new TimeSpan(0, 11, 30, 0, 0),
                            RestaurantId = new Guid("e9d28cb7-8e75-4b36-b5f9-63a36b435c8b")
                        },
                        new
                        {
                            Id = new Guid("53985eee-46ca-44e1-b457-4c3fc73e60c2"),
                            ClosingTime = new TimeSpan(0, 23, 30, 0, 0),
                            Day = 4,
                            IsClosed = false,
                            OpeningTime = new TimeSpan(0, 11, 30, 0, 0),
                            RestaurantId = new Guid("e9d28cb7-8e75-4b36-b5f9-63a36b435c8b")
                        },
                        new
                        {
                            Id = new Guid("16e600d3-5d1d-4f6a-afe0-2a8994f647df"),
                            ClosingTime = new TimeSpan(0, 23, 30, 0, 0),
                            Day = 5,
                            IsClosed = false,
                            OpeningTime = new TimeSpan(0, 11, 30, 0, 0),
                            RestaurantId = new Guid("e9d28cb7-8e75-4b36-b5f9-63a36b435c8b")
                        },
                        new
                        {
                            Id = new Guid("f07de646-e32b-4e34-9031-a61d1f5d3437"),
                            ClosingTime = new TimeSpan(0, 23, 30, 0, 0),
                            Day = 6,
                            IsClosed = false,
                            OpeningTime = new TimeSpan(0, 11, 30, 0, 0),
                            RestaurantId = new Guid("e9d28cb7-8e75-4b36-b5f9-63a36b435c8b")
                        },
                        new
                        {
                            Id = new Guid("6355f560-db8e-43e5-b36b-1b282950f841"),
                            ClosingTime = new TimeSpan(0, 17, 30, 0, 0),
                            Day = 0,
                            IsClosed = false,
                            OpeningTime = new TimeSpan(0, 12, 0, 0, 0),
                            RestaurantId = new Guid("e9d28cb7-8e75-4b36-b5f9-63a36b435c8b")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FoodLoverGuide.Models.MenuItem", b =>
                {
                    b.HasOne("FoodLoverGuide.Models.Restaurant", "Restaurant")
                        .WithMany("Menu")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodLoverGuide.Models.Rating", b =>
                {
                    b.HasOne("FoodLoverGuide.Models.Restaurant", "Restaurant")
                        .WithMany("RatingList")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodLoverGuide.Models.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodLoverGuide.Models.Reservation", b =>
                {
                    b.HasOne("FoodLoverGuide.Models.Restaurant", "Restaurant")
                        .WithMany("Reservation")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodLoverGuide.Models.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodLoverGuide.Models.RestaurantCategories", b =>
                {
                    b.HasOne("FoodLoverGuide.Models.Category", "Category")
                        .WithMany("RestaurantCategoriesList")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodLoverGuide.Models.Restaurant", "Restaurant")
                        .WithMany("RestaurantCategoriesList")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodLoverGuide.Models.RestaurantFeature", b =>
                {
                    b.HasOne("FoodLoverGuide.Models.Feature", "Features")
                        .WithMany("RestaurantsList")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodLoverGuide.Models.Restaurant", "Restaurants")
                        .WithMany("Features")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Features");

                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("FoodLoverGuide.Models.RestaurantPhoto", b =>
                {
                    b.HasOne("FoodLoverGuide.Models.Restaurant", "Restaurant")
                        .WithMany("Photos")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodLoverGuide.Models.Review", b =>
                {
                    b.HasOne("FoodLoverGuide.Models.Restaurant", "Restaurant")
                        .WithMany("Reviews")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodLoverGuide.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodLoverGuide.Models.WorkTimeSchedule", b =>
                {
                    b.HasOne("FoodLoverGuide.Models.Restaurant", "Restaurant")
                        .WithMany("WorkTime")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FoodLoverGuide.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FoodLoverGuide.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodLoverGuide.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FoodLoverGuide.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodLoverGuide.Models.Category", b =>
                {
                    b.Navigation("RestaurantCategoriesList");
                });

            modelBuilder.Entity("FoodLoverGuide.Models.Feature", b =>
                {
                    b.Navigation("RestaurantsList");
                });

            modelBuilder.Entity("FoodLoverGuide.Models.Restaurant", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("Menu");

                    b.Navigation("Photos");

                    b.Navigation("RatingList");

                    b.Navigation("Reservation");

                    b.Navigation("RestaurantCategoriesList");

                    b.Navigation("Reviews");

                    b.Navigation("WorkTime");
                });

            modelBuilder.Entity("FoodLoverGuide.Models.User", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
